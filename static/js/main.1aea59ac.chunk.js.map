{"version":3,"sources":["App/components/Table/index.js","App/components/EditableCell/index.js","App/constants/tables.js","App/components/TextInput/index.js","App/components/SelectBox/index.js","App/components/CheckBox/index.js","serviceWorker.js","index.js","App/index.js","App/utils/getAge.js"],"names":["Table","columns","data","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps","EditableCell","cellInfo","qualificationsData","setqualificationsData","id","initialValue","value","useState","setValue","onChange","e","target","onBlur","item","index","finalTableColumns","Header","accessor","Cell","qualificationsTableColumns","TextInput","longInput","label","toUpperCase","remainingProps","className","type","finalValue","SelectBox","CheckBox","checked","Boolean","window","location","hostname","match","ReactDOM","JSON","parse","localStorage","getItem","tableData","setTableData","categoryNo","setCategoryNo","applicationFor","setApplicationFor","isScps","setIsScps","isSara","setIsSara","dcpu","setDcpu","jjb","setJjb","ch","setCh","name","setName","gender","setGender","dob","setDob","age","setAge","father","setFather","residence","setResidence","phone","setPhone","mobile","setMobile","email","setEmail","address","setAddress","experience","setexperience","course","institution","regNo","yearOfPass","marks","remarks","dateString","today","Date","birthDate","getFullYear","m","getMonth","getDate","getAge","onClick","tempData","setItem","stringify","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1aea59ac.chunk.js","sourcesContent":["import React from \"react\";\nimport { useTable } from \"react-table\";\n\nexport default function Table({ columns, data }) {\n  // Use the state and functions returned from useTable to build your UI\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data\n  });\n\n  // Render the UI for your table\n  return (\n    <table {...getTableProps()}>\n      <thead>\n        {headerGroups.map(headerGroup => (\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map(column => (\n              <th {...column.getHeaderProps()}>{column.render(\"Header\")}</th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {rows.map((row, i) => {\n          prepareRow(row);\n          return (\n            <tr {...row.getRowProps()}>\n              {row.cells.map(cell => {\n                return <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>;\n              })}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n","import React, { useState } from \"react\";\n\nexport default function EditableCell({\n  cellInfo,\n  qualificationsData,\n  setqualificationsData\n}) {\n  const {\n    row,\n    column: { id },\n    cell: { value: initialValue }\n  } = cellInfo;\n  const [value, setValue] = useState(initialValue);\n  const onChange = e => {\n    setValue(e.target.value);\n  };\n  const onBlur = () => {\n    setqualificationsData(\n      qualificationsData.map((item, index) => {\n        if (row.index === index) {\n          return { ...item, [id]: value };\n        }\n        return item;\n      })\n    );\n  };\n  return <input value={value} onChange={onChange} onBlur={onBlur} />;\n}\n","import React from \"react\";\n\nimport EditableCell from \"../components/EditableCell\";\nimport Table from \"../components/Table\";\n\nexport const finalTableColumns = [\n  { Header: \"Category No\", accessor: \"categoryNo\" },\n  { Header: \"Application for\", accessor: \"applicationFor\" },\n  { Header: \"SCPS\", accessor: \"isScps\" },\n  { Header: \"SARA\", accessor: \"isSara\" },\n  { Header: \"DCPU\", accessor: \"dcpu\" },\n  { Header: \"JJ B/CWC\", accessor: \"jjb\" },\n  { Header: \"CH/OH/POS\", accessor: \"ch\" },\n  { Header: \"Name\", accessor: \"name\" },\n  { Header: \"Gender\", accessor: \"gender\" },\n  { Header: \"D.O.B\", accessor: \"dob\" },\n  { Header: \"Age\", accessor: \"age\" },\n  { Header: \"Father's Name\", accessor: \"father\" },\n  { Header: \"Phone\", accessor: \"phone\" },\n  { Header: \"Mobile\", accessor: \"mobile\" },\n  { Header: \"Email\", accessor: \"email\" },\n  { Header: \"Address\", accessor: \"address\" },\n  {\n    Header: \"Qualifications Table\",\n    accessor: \"qualificationsData\",\n    Cell: ({ cell: { value } }) => {\n      if (value) {\n        return (\n          <Table\n            columns={[\n              { Header: \"Course\", accessor: \"course\" },\n              { Header: \"Institution/University\", accessor: \"institution\" },\n              { Header: \"Reg.No\", accessor: \"regNo\" },\n              { Header: \"Year Of Pass\", accessor: \"yearOfPass\" },\n              { Header: \"% of Mark/Grade\", accessor: \"marks\" },\n              { Header: \"Remarks\", accessor: \"remarks\" }\n            ]}\n            data={value}\n          />\n        );\n      }\n      return null;\n    }\n  },\n  { Header: \"Experience\", accessor: \"experience\" }\n];\n\nexport const qualificationsTableColumns = (\n  qualificationsData,\n  setqualificationsData\n) => [\n  {\n    Header: \"Course\",\n    accessor: \"course\",\n    Cell: cellInfo => (\n      <EditableCell\n        cellInfo={cellInfo}\n        qualificationsData={qualificationsData}\n        setqualificationsData={setqualificationsData}\n      />\n    )\n  },\n  {\n    Header: \"Institution/University\",\n    accessor: \"institution\",\n    Cell: cellInfo => (\n      <EditableCell\n        cellInfo={cellInfo}\n        qualificationsData={qualificationsData}\n        setqualificationsData={setqualificationsData}\n      />\n    )\n  },\n  {\n    Header: \"Reg.No\",\n    accessor: \"regNo\",\n    Cell: cellInfo => (\n      <EditableCell\n        cellInfo={cellInfo}\n        qualificationsData={qualificationsData}\n        setqualificationsData={setqualificationsData}\n      />\n    )\n  },\n  {\n    Header: \"Year Of Pass\",\n    accessor: \"yearOfPass\",\n    Cell: cellInfo => (\n      <EditableCell\n        cellInfo={cellInfo}\n        qualificationsData={qualificationsData}\n        setqualificationsData={setqualificationsData}\n      />\n    )\n  },\n  {\n    Header: \"% of Mark/Grade\",\n    accessor: \"marks\",\n    Cell: cellInfo => (\n      <EditableCell\n        cellInfo={cellInfo}\n        qualificationsData={qualificationsData}\n        setqualificationsData={setqualificationsData}\n      />\n    )\n  },\n  {\n    Header: \"Remarks\",\n    accessor: \"remarks\",\n    Cell: cellInfo => (\n      <EditableCell\n        cellInfo={cellInfo}\n        qualificationsData={qualificationsData}\n        setqualificationsData={setqualificationsData}\n      />\n    )\n  }\n];\n","import React from \"react\";\n\nexport default function TextInput({\n  longInput,\n  label,\n  onChange,\n  toUpperCase,\n  ...remainingProps\n}) {\n  return (\n    <div className=\"mt-4\">\n      {`${label}: `}\n      <input\n        type=\"text\"\n        className={`ml-2 mr-4 ${longInput ? `w-50` : ``}`}\n        onChange={({ target: { value } }) => {\n          let finalValue = value;\n          if (toUpperCase) {\n            finalValue = finalValue.toUpperCase();\n          }\n          onChange(finalValue);\n        }}\n        {...remainingProps}\n      />\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function SelectBox({ label, value, onChange }) {\n  return (\n    <div className=\"col text-center\">\n      {label}\n      <select\n        value={value}\n        onChange={e => onChange(e.target.value)}\n        className=\"ml-2\"\n      >\n        <option value=\"Alappuzha\">Alappuzha</option>\n        <option value=\"Ernakulam\">Ernakulam</option>\n        <option value=\"Idukki\">Idukki</option>\n        <option value=\"Kannur\">Kannur</option>\n        <option value=\"Kasaragod\">Kasaragod</option>\n        <option value=\"Kollam\">Kollam</option>\n        <option value=\"Kottayam\">Kottayam</option>\n        <option value=\"Kozhikode\">Kozhikode</option>\n        <option value=\"Malappuram\">Malappuram</option>\n        <option value=\"Palakkad\">Palakkad</option>\n        <option value=\"Pathanamthitta\">Pathanamthitta</option>\n        <option value=\"Thiruvananthapuram\">Thiruvananthapuram</option>\n        <option value=\"Thrissur\">Thrissur</option>\n        <option value=\"Wayanad\">Wayanad</option>\n      </select>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function CheckBox({ label, checked, onChange }) {\n  return (\n    <div className=\"col-1 text-center\">\n      <input\n        className=\"mr-1\"\n        type=\"checkbox\"\n        checked={checked}\n        onChange={e => onChange(e.target.checked)}\n      />\n      {label}\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App/index\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState } from \"react\";\n\nimport \"./index.css\";\nimport Table from \"./components/Table\";\nimport getAge from \"./utils/getAge\";\nimport {\n  finalTableColumns,\n  qualificationsTableColumns\n} from \"./constants/tables\";\nimport TextInput from \"./components/TextInput\";\nimport SelectBox from \"./components/SelectBox\";\nimport CheckBox from \"./components/CheckBox\";\n\nexport default function App() {\n  const [tableData, setTableData] = useState(\n    JSON.parse(localStorage.getItem(\"tableData\"))\n      ? JSON.parse(localStorage.getItem(\"tableData\"))\n      : []\n  );\n  const [categoryNo, setCategoryNo] = useState(\"\");\n  const [applicationFor, setApplicationFor] = useState(\"\");\n  const [isScps, setIsScps] = useState(false);\n  const [isSara, setIsSara] = useState(false);\n  const [dcpu, setDcpu] = useState(\"Alappuzha\");\n  const [jjb, setJjb] = useState(\"Alappuzha\");\n  const [ch, setCh] = useState(\"Alappuzha\");\n  const [name, setName] = useState(\"\");\n  const [gender, setGender] = useState(\"Male\");\n  const [dob, setDob] = useState(\"\");\n  const [age, setAge] = useState(0);\n  const [father, setFather] = useState(\"\");\n  const [residence, setResidence] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n  const [mobile, setMobile] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [address, setAddress] = useState(\"\");\n  const [experience, setexperience] = useState(\"\");\n  const [qualificationsData, setqualificationsData] = useState([\n    {\n      course: \"S.S.L.C\",\n      institution: \"\",\n      regNo: \"\",\n      yearOfPass: \"\",\n      marks: \"\",\n      remarks: \"\"\n    },\n    {\n      course: \"Pre-Degree/+2\",\n      institution: \"\",\n      regNo: \"\",\n      yearOfPass: \"\",\n      marks: \"\",\n      remarks: \"\"\n    }\n  ]);\n\n  return (\n    <div className=\"bg-light\">\n      <div className=\"container p-3\">\n        <TextInput\n          label={`Category No`}\n          value={categoryNo}\n          onChange={setCategoryNo}\n        />\n        <h4 className=\"text-center mt-3\">\n          Women And Child Development Department Integrated Child Protection\n          Scheme [ICPS]\n        </h4>\n        <TextInput\n          longInput\n          label={`Application for the Post of`}\n          value={applicationFor}\n          onChange={setApplicationFor}\n        />\n        <div className=\"row mt-3 d-flex align-items-center\">\n          <CheckBox label=\"SCPS\" checked={isScps} onChange={setIsScps} />\n          <CheckBox label=\"SARA\" checked={isSara} onChange={setIsSara} />\n          <SelectBox\n            label=\"DCPU (Specify Dist)\"\n            value={dcpu}\n            onChange={setDcpu}\n          />\n          <SelectBox\n            label=\"JJ B/CWC (Specify Dist)\"\n            value={jjb}\n            onChange={setJjb}\n          />\n          <SelectBox\n            label=\"CH/OH/POS (Specify Dist)\"\n            value={ch}\n            onChange={setCh}\n          />\n        </div>\n        <TextInput\n          longInput\n          toUpperCase\n          label={`1. Name (Use Capital Letters Only)`}\n          value={name}\n          onChange={setName}\n        />\n        <div className=\"mt-4\">\n          2. Male/Female/TG (Specify):\n          <select\n            value={gender}\n            onChange={e => setGender(e.target.value)}\n            className=\"ml-2\"\n          >\n            <option value=\"Male\">Male</option>\n            <option value=\"Female\">Female</option>\n            <option value=\"TG\">TG</option>\n          </select>\n        </div>\n        <div className=\"mt-4\">\n          3. Age & Date of Birth:\n          <input\n            type=\"date\"\n            className=\"mx-2\"\n            value={dob}\n            onChange={e => {\n              setDob(e.target.value);\n              setAge(getAge(e.target.value));\n            }}\n          />\n          {`Age: ${age}`}\n        </div>\n        <TextInput\n          longInput\n          toUpperCase\n          label={`4. Father's/Husband's Name`}\n          value={father}\n          onChange={setFather}\n        />\n        <div className=\"mt-4 d-flex align-items-center\">\n          5. Place of Residence (Proof to be attached):\n          <textarea\n            rows=\"3\"\n            className=\"ml-2 w-50\"\n            value={residence}\n            onChange={e => setResidence(e.target.value)}\n          />\n        </div>\n        <div className=\"d-flex align-items-center\">\n          <TextInput\n            type=\"tel\"\n            label={`6. Phone / Mobile No: 1`}\n            value={phone}\n            onChange={setPhone}\n          />\n          <TextInput\n            type=\"tel\"\n            label={`2`}\n            value={mobile}\n            onChange={setMobile}\n          />\n        </div>\n        <TextInput\n          longInput\n          type=\"email\"\n          label={`7. e-mail Address`}\n          value={email}\n          onChange={setEmail}\n        />\n        <div className=\"mt-4 d-flex align-items-center\">\n          8. Permanent Address (With Pin code):\n          <textarea\n            rows=\"3\"\n            className=\"ml-2 w-50\"\n            value={address}\n            onChange={e => setAddress(e.target.value)}\n          />\n        </div>\n        <div className=\"mt-4\">\n          9. Qualification (Use Additional Sheets if needed):\n          <Table\n            columns={qualificationsTableColumns(\n              qualificationsData,\n              setqualificationsData\n            )}\n            data={qualificationsData}\n          />\n        </div>\n        <TextInput\n          longInput\n          label={`10. Experience`}\n          value={experience}\n          onChange={setexperience}\n        />\n        <button\n          className=\"w-25 m-3 p-2 btn btn-primary\"\n          onClick={() => {\n            const tempData = [\n              ...tableData,\n              {\n                categoryNo,\n                applicationFor,\n                isScps,\n                isSara,\n                dcpu,\n                jjb,\n                ch,\n                name,\n                gender,\n                dob,\n                age,\n                father,\n                residence,\n                phone,\n                mobile,\n                email,\n                address,\n                qualificationsData,\n                experience\n              }\n            ];\n            localStorage.setItem(\"tableData\", JSON.stringify(tempData));\n            setTableData(tempData);\n          }}\n        >\n          Save\n        </button>\n      </div>\n\n      <div className=\"container py-5\">\n        <Table columns={finalTableColumns} data={tableData} />\n      </div>\n    </div>\n  );\n}\n","export default function getAge(dateString) {\n  var today = new Date();\n  var birthDate = new Date(dateString);\n  var age = today.getFullYear() - birthDate.getFullYear();\n  var m = today.getMonth() - birthDate.getMonth();\n  if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n    age--;\n  }\n  return age;\n}\n"],"sourceRoot":""}